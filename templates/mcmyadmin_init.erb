#!/bin/bash
# /etc/init.d/mcmyadmin

### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    MCMyadmin Minecraft server
# Description:    Starts the MCMyadmin minecraft server
### END INIT INFO

#Settings
SERVICE='MCMA2_Linux_x86_64'
USERNAME="<%= @user %>"
MCPATH="<%= @install_dir %>"
MAX_HEAP="<%= @heap_size %>"
MIN_HEAP="<%= @heap_start %>"


ME=`whoami`
as_user() {
  if [ "$ME" == "$USERNAME" ] ; then
    bash -c "$1"
  else
    su - $USERNAME -c "$1"
  fi
}

mc_start() {
  if ps ax | grep -v grep |grep $SERVICE > /dev/null
  then
    echo "Tried to start but $SERVICE was already running!"
  else
    echo "$SERVICE was not running... starting."
    cd $MCPATH
    as_user "cd $MCPATH && screen -dmS mcmyadmin <%= @install_cmd %>"
    sleep 7
    if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
    then
      echo "$SERVICE is now running."
    else
      echo "Could not start $SERVICE."
    fi
  fi
}

mc_stop() {
  if ps ax | grep -v grep | grep $SERVICE > /dev/null
  then
    echo "$SERVICE is running... stopping."
      ## Add a line for each task for each Minecraft server you're controlling
      as_user "screen -p 0 -S mcmyadmin -X eval 'stuff \"quit\"\015'"
  else
    echo "$SERVICE was not running."
  fi
  if ps ax | grep $SERVICE > /dev/null
  then
    echo "$SERVICE could not be shut down... still running."
  else
    echo "$SERVICE is shut down."
  fi
}

#Start-Stop here
case "$1" in
  start)
    mc_start
  ;;
  stop)
    mc_stop
  ;;
  restart)
    mc_stop
    mc_start
  ;;
  status)
    if ps ax | grep -v grep | grep $SERVICE > /dev/null
    then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is not running."
      exit 1
    fi
  ;;

  *)
    echo "Usage: /etc/init.d/mcmyadmin {start|stop|status|restart}"
    exit 1
  ;;
esac

exit 0
